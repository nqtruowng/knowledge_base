from graph_builder import GraphBuilder
import copy

class BackwardChainer:
    def __init__(self, rules, gt_str, kl_str, method):
        self.rules = copy.deepcopy(rules) # List d·∫°ng [{'left': {'a', 'b'}, 'right': 'c'}, ...]
        self.gt = set(f.strip() for f in gt_str.split(',') if f.strip())
        self.kl_str = kl_str.strip() # Gi·∫£ ƒë·ªãnh suy di·ªÖn l√πi 1 m·ª•c ti√™u
        self.method = method # 'min', 'max', 'fpg'
        
        self.log = []
        self.vet = [] # V·∫øt suy di·ªÖn (th·ª© t·ª± ng∆∞·ª£c)
        
        self.graph_builder = None
        if self.method == 'fpg':
            self.graph_builder = GraphBuilder(self.rules)
            
        # üö© TH√äM M·ªöI (Y√äU C·∫¶U 2): D·ªØ li·ªáu cho ƒë·ªì th·ªã t√¨m ki·∫øm
        self.graph_nodes = []
        self.graph_edges = []
        self.node_counter = 0

    def _format_set(self, s):
        """Helper: ƒê·ªãnh d·∫°ng set th√†nh chu·ªói 'a,b,c'."""
        return ','.join(sorted(list(s)))

    def _format_list(self, l):
        """Helper: ƒê·ªãnh d·∫°ng list th√†nh chu·ªói '1,2,3'."""
        return ','.join(map(str, l))

    def _find_rules_for_goal(self, goal):
        """T√¨m c√°c lu·∫≠t (theo index) c√≥ v·∫ø ph·∫£i l√† goal."""
        return [i for i, rule in enumerate(self.rules) if rule['right'] == goal]

    def _select_rules(self, rule_indices):
        """S·∫Øp x·∫øp/ch·ªçn lu·∫≠t t·ª´ THOA(f) theo ph∆∞∆°ng ph√°p."""
        if not rule_indices:
            return []
            
        if self.method == 'min':
            return sorted(rule_indices)
        if self.method == 'max':
            return sorted(rule_indices, reverse=True)
        
        if self.method == 'fpg':
            rule_heuristics = []
            for r_index in rule_indices:
                rule = self.rules[r_index]
                max_dist = 0
                for f in rule['left']:
                    dist = self.graph_builder.get_fpg_distance_to_gt(f, self.gt)
                    if dist == float('inf'):
                        max_dist = float('inf') 
                        break
                    if dist > max_dist:
                        max_dist = dist
                rule_heuristics.append((r_index, max_dist))
            
            rule_heuristics.sort(key=lambda x: (x[1], x[0]))
            return [r_index for r_index, h_val in rule_heuristics]
            
        return sorted(rule_indices) # M·∫∑c ƒë·ªãnh l√† min

    # üö© S·ª¨A ƒê·ªîI (Y√äU C·∫¶U 2): S·ª≠a h√†m _prove ƒë·ªÉ x√¢y d·ª±ng ƒë·ªì th·ªã
    def _prove(self, goal, path, path_node_map, parent_node_id=None):
        """
        H√†m ƒë·ªá quy ch·ª©ng minh m·ª•c ti√™u (goal).
        parent_node_id: ID c·ªßa n√∫t cha (ƒë·ªÉ v·∫Ω c·∫°nh)
        path_node_map: dict theo d√µi {goal: node_id} tr√™n ƒë∆∞·ªùng d·∫´n ƒë·ªÉ ph√°t hi·ªán l·∫∑p
        """
        indent = "  " * len(path)
        self.log.append(f"{indent}C·∫ßn ch·ª©ng minh: {goal}")

        # T·∫°o n√∫t cho m·ª•c ti√™u (goal) n√†y
        current_node_id = self.node_counter
        self.node_counter += 1
        node_data = {'id': current_node_id, 'label': goal}
        
        # Th√™m c·∫°nh t·ª´ cha (n·∫øu c√≥) ƒë·∫øn n√∫t n√†y
        if parent_node_id is not None:
            self.graph_edges.append({'from': parent_node_id, 'to': current_node_id})

        # 1. Ki·ªÉm tra GT
        if goal in self.gt:
            self.log.append(f"{indent}-> {goal} ƒë√£ c√≥ trong GT. (True)")
            node_data['group'] = 'gt' # T√¥ m√†u GT
            self.graph_nodes.append(node_data)
            return True
            
        # 2. Ki·ªÉm tra v√≤ng l·∫∑p
        if goal in path:
            self.log.append(f"{indent}-> Ph√°t hi·ªán v√≤ng l·∫∑p (Quay lui): {goal} ƒë√£ c√≥ trong ƒë∆∞·ªùng d·∫´n.")
            node_data['group'] = 'loop'
            node_data['label'] += ' (L·∫∑p)'
            self.graph_nodes.append(node_data)
            
            # Th√™m c·∫°nh "quay lui"
            original_node_id = path_node_map[goal]
            self.graph_edges.append({
                'from': current_node_id, 
                'to': original_node_id, 
                'label': 'Quay lui', 
                'dashes': True
            })
            return False
            
        # Th√™m n√∫t v√†o ƒë·ªì th·ªã (sau khi check GT/L·∫∑p)
        self.graph_nodes.append(node_data)
        path_node_map[goal] = current_node_id # L∆∞u id c·ªßa n√∫t n√†y v√†o ƒë∆∞·ªùng d·∫´n

        # 3. T√¨m lu·∫≠t
        applicable_rule_indices = self._find_rules_for_goal(goal)
        if not applicable_rule_indices:
            self.log.append(f"{indent}-> Kh√¥ng c√≥ lu·∫≠t n√†o sinh ra {goal}. (False)")
            node_data['group'] = 'failed' # T√¥ m√†u th·∫•t b·∫°i
            return False
            
        # 4. S·∫Øp x·∫øp lu·∫≠t (THOA(f))
        thoa = self._select_rules(applicable_rule_indices)
        self.log.append(f"{indent}C√°c lu·∫≠t √°p d·ª•ng (theo th·ª© t·ª± {self.method}): {[f'r{i+1}' for i in thoa]}")
        
        # 5. Th·ª≠ t·ª´ng lu·∫≠t
        for r_index in thoa:
            rule = self.rules[r_index]
            self.log.append(f"{indent}Th·ª≠ lu·∫≠t r{r_index+1}: {rule['raw_left']} -> {rule['right']}")
            
            # T·∫°o m·ªôt "n√∫t lu·∫≠t" (n√∫t AND)
            rule_node_id = self.node_counter
            self.node_counter += 1
            premise_label = ','.join(sorted(list(rule['left'])))
            rule_node_data = {
                'id': rule_node_id, 
                'label': f'{{{premise_label}}} (r{r_index+1})',
                'shape': 'box' # N√∫t lu·∫≠t l√† h√¨nh h·ªôp
            }
            self.graph_nodes.append(rule_node_data)
            # N·ªëi 'goal' -> 'n√∫t lu·∫≠t'
            self.graph_edges.append({'from': current_node_id, 'to': rule_node_id})

            all_premises_proven = True
            premises = sorted(list(rule['left'])) # Ch·ª©ng minh theo th·ª© t·ª± alpha
            
            for premise in premises:
                # ƒê·ªá quy ch·ª©ng minh t·ª´ng ti·ªÅn ƒë·ªÅ
                # N√∫t cha l√† 'n√∫t lu·∫≠t' (rule_node_id)
                if not self._prove(premise, path + [goal], path_node_map.copy(), rule_node_id):
                    all_premises_proven = False
                    self.log.append(f"{indent}-> Ti·ªÅn ƒë·ªÅ {premise} c·ªßa r{r_index+1} th·∫•t b·∫°i. (Quay lui)")
                    rule_node_data['group'] = 'failed' # T√¥ m√†u n√∫t lu·∫≠t th·∫•t b·∫°i
                    break # Th·ª≠ lu·∫≠t ti·∫øp theo
            
            if all_premises_proven:
                self.log.append(f"{indent}-> T·∫•t c·∫£ ti·ªÅn ƒë·ªÅ c·ªßa r{r_index+1} l√† True.")
                self.log.append(f"{indent}-> {goal} ƒë∆∞·ª£c ch·ª©ng minh l√† True.")
                self.vet.append(r_index + 1) # Th√™m v√†o VET
                node_data['group'] = 'proven' # T√¥ m√†u n√∫t goal th√†nh c√¥ng
                rule_node_data['group'] = 'proven' # T√¥ m√†u n√∫t lu·∫≠t th√†nh c√¥ng
                return True
                
        # 6. N·∫øu th·ª≠ h·∫øt lu·∫≠t m√† kh√¥ng th√†nh c√¥ng
        self.log.append(f"{indent}-> ƒê√£ th·ª≠ h·∫øt lu·∫≠t cho {goal} nh∆∞ng th·∫•t b·∫°i. (False)")
        node_data['group'] = 'failed' # T√¥ m√†u n√∫t goal th·∫•t b·∫°i
        return False

    def run(self):
        """Th·ª±c thi thu·∫≠t to√°n suy di·ªÖn l√πi."""
        if not self.kl_str:
            return {'status': 'L·ªói', 'log': ['Vui l√≤ng nh·∫≠p m·ªôt m·ª•c ti√™u (K·∫øt lu·∫≠n)']}
            
        # Reset ƒë·ªì th·ªã
        self.graph_nodes = []
        self.graph_edges = []
        self.node_counter = 0
            
        self.log.append(f"B·∫Øt ƒë·∫ßu suy di·ªÖn l√πi cho m·ª•c ti√™u: {self.kl_str}")
        self.log.append(f"Gi·∫£ thi·∫øt (GT): {{{self._format_set(self.gt)}}}")
        self.log.append(f"Ph∆∞∆°ng ph√°p ch·ªçn lu·∫≠t: {self.method.upper()}")
        self.log.append("-" * 20)
        
        is_proven = self._prove(self.kl_str, [], {})
        
        self.log.append("-" * 20)
        if is_proven:
            result = "Th√†nh c√¥ng"
            self.log.append(f"K·∫øt lu·∫≠n: {result}. M·ª•c ti√™u {self.kl_str} ƒë√£ ƒë∆∞·ª£c ch·ª©ng minh.")
            self.vet.reverse()
            self.log.append(f"V·∫øt suy di·ªÖn (VET): {self._format_list(self.vet)}")
        else:
            result = "Th·∫•t b·∫°i"
            self.log.append(f"K·∫øt lu·∫≠n: {result}. Kh√¥ng th·ªÉ ch·ª©ng minh m·ª•c ti√™u {self.kl_str}.")
            
        return {
            'status': result, 
            'log': self.log, 
            'vet': self.vet,
            'graph_data': {'nodes': self.graph_nodes, 'edges': self.graph_edges}
        }