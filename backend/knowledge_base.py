class KnowledgeBase:
    """Qu·∫£n l√Ω t·∫≠p lu·∫≠t R."""
    def __init__(self):
        self.rules = [] # List l∆∞u c√°c lu·∫≠t g·ªëc, d·∫°ng {'raw_left': 'a^b', 'raw_right': 'c', 'left': {'a', 'b'}, 'right': 'c'}

    def _parse_rule(self, left_str, right_str):
        """Ph√¢n t√≠ch chu·ªói lu·∫≠t th√†nh c√°c th√†nh ph·∫ßn."""
        if not left_str or not right_str:
            raise ValueError("V·∫ø tr√°i v√† v·∫ø ph·∫£i kh√¥ng ƒë∆∞·ª£c r·ªóng.")
        
        left_facts = set(f.strip() for f in left_str.split('^') if f.strip())
        right_fact = right_str.strip()
        
        if not left_facts:
             raise ValueError("V·∫ø tr√°i ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt s·ª± ki·ªán.")
        if len(right_fact.split()) > 1 or '^' in right_fact or ',' in right_fact:
             raise ValueError("V·∫ø ph·∫£i ch·ªâ ƒë∆∞·ª£c ch·ª©a m·ªôt s·ª± ki·ªán duy nh·∫•t.")
             
        return {
            'raw_left': left_str,
            'raw_right': right_str,
            'left': left_facts,
            'right': right_fact
        }

    def add_rule(self, left_str, right_str):
        """Th√™m lu·∫≠t m·ªõi v√† tr·∫£ v·ªÅ index c·ªßa n√≥."""
        rule_data = self._parse_rule(left_str, right_str)
        self.rules.append(rule_data)
        return len(self.rules) - 1 # Tr·∫£ v·ªÅ index v·ª´a th√™m

    def update_rule(self, index, left_str, right_str):
        """C·∫≠p nh·∫≠t lu·∫≠t t·∫°i index."""
        if 0 <= index < len(self.rules):
            rule_data = self._parse_rule(left_str, right_str)
            self.rules[index] = rule_data
        else:
            raise IndexError("Kh√¥ng t√¨m th·∫•y lu·∫≠t ƒë·ªÉ c·∫≠p nh·∫≠t.")

    def delete_rule(self, index):
        """X√≥a lu·∫≠t t·∫°i index."""
        if 0 <= index < len(self.rules):
            self.rules.pop(index)
        else:
            raise IndexError("Kh√¥ng t√¨m th·∫•y lu·∫≠t ƒë·ªÉ x√≥a.")

    def get_all_rules_serializable(self):
        """L·∫•y t·∫•t c·∫£ lu·∫≠t ·ªü ƒë·ªãnh d·∫°ng c√≥ th·ªÉ g·ª≠i qua JSON."""
        # Tr·∫£ v·ªÅ index (h√†ng trong table) v√† lu·∫≠t
        return [
            {'index': i, 'left': rule['raw_left'], 'right': rule['raw_right']}
            for i, rule in enumerate(self.rules)
        ]
        
    def get_rules_for_chaining(self):
        """
        L·∫•y danh s√°ch lu·∫≠t ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch cho c√°c thu·∫≠t to√°n suy di·ªÖn.
        """
        # --- üö© S·ª¨A L·ªñI T·∫†I ƒê√ÇY ---
        # Tr·∫£ v·ªÅ M·ªòT B·∫¢N SAO c·ªßa danh s√°ch lu·∫≠t ƒë·∫ßy ƒë·ªß.
        # C√°c Chainer/Builder s·∫Ω nh·∫≠n ƒë·∫ßy ƒë·ªß {'left', 'right', 'raw_left', 'raw_right'}
        # (H√†m .copy() t·∫°o m·ªôt b·∫£n sao n√¥ng (shallow copy) c·ªßa dict)
        return [rule.copy() for rule in self.rules]
        # ------------------------