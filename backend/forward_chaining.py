from graph_builder import GraphBuilder
import copy

class ForwardChainer:
    def __init__(self, rules, gt_str, kl_str, method):
        self.rules = copy.deepcopy(rules) # List d·∫°ng [{'left': {'a', 'b'}, 'right': 'c'}, ...]
        self.gt = set(f.strip() for f in gt_str.split(',') if f.strip())
        self.kl = set(f.strip() for f in kl_str.split(',') if f.strip())
        self.method = method # 'stack', 'queue', 'min', 'max', 'fpg', 'rpg'
        
        self.tg = set(self.gt) # TG (T·∫≠p trung gian)
        self.vet = []          # VET (V·∫øt suy di·ªÖn - 1-based index)
        self.r_used_indices = set() # C√°c lu·∫≠t ƒë√£ d√πng (theo index 0-based)
        self.log = []          # Log c√°c b∆∞·ªõc
        
        # üö© TH√äM M·ªöI (Y√äU C·∫¶U 3.2): B·∫£ng t√≥m t·∫Øt c√°c b∆∞·ªõc
        self.trace_table = []
        
        self.graph_builder = None
        self.rkl_indices = None
        if self.method in ['fpg', 'rpg']:
            self.graph_builder = GraphBuilder(self.rules)
            if self.method == 'rpg':
                # T√¨m RKL (t·∫≠p lu·∫≠t th·ªèa m√£n k·∫øt lu·∫≠n)
                self.rkl_indices = {i for i, r in enumerate(self.rules) if r['right'] in self.kl}


    def _format_set(self, s):
        """Helper: ƒê·ªãnh d·∫°ng set th√†nh chu·ªói 'a,b,c'."""
        return ','.join(sorted(list(s)))

    def _format_list(self, l):
        """Helper: ƒê·ªãnh d·∫°ng list th√†nh chu·ªói '1,2,3'."""
        return ','.join(map(str, l))

    def _get_r_remaining_str(self):
        """Helper: L·∫•y danh s√°ch (str) c√°c lu·∫≠t (1-based) CH∆ØA S·ª¨ D·ª§NG."""
        remaining = [i + 1 for i in range(len(self.rules)) if i not in self.r_used_indices]
        return self._format_list(sorted(remaining))

    def _loc(self):
        """H√†m LOC(TG, R) - T√¨m c√°c lu·∫≠t th·ªèa m√£n."""
        satisfied_rules = []
        for i, rule in enumerate(self.rules):
            if i not in self.r_used_indices and rule['left'].issubset(self.tg):
                satisfied_rules.append(i)
        return satisfied_rules

    def _select_rule_from_thoa(self, thoa):
        """Ch·ªçn lu·∫≠t t·ª´ THOA d·ª±a tr√™n ph∆∞∆°ng ph√°p."""
        if not thoa:
            return None
        
        if self.method == 'stack':
            return thoa.pop() # L·∫•y cu·ªëi (LIFO)
        if self.method == 'queue':
            return thoa.pop(0) # L·∫•y ƒë·∫ßu (FIFO)
        if self.method == 'min':
            selected = min(thoa)
            thoa.remove(selected)
            return selected
        if self.method == 'max':
            selected = max(thoa)
            thoa.remove(selected)
            return selected
        
        if self.method == 'fpg':
            # T√≠nh h(r) = KC(q, KL) cho m·ªçi r trong THOA
            best_rule = -1
            min_h = float('inf')
            
            for r_index in thoa:
                q = self.rules[r_index]['right']
                h = self.graph_builder.get_fpg_distance(q, self.kl)
                
                if h < min_h:
                    min_h = h
                    best_rule = r_index
                elif h == min_h:
                    # N·∫øu h b·∫±ng nhau, ∆∞u ti√™n ch·ªâ s·ªë nh·ªè nh·∫•t (theo slide)
                    if best_rule == -1 or r_index < best_rule:
                        best_rule = r_index
                        
            if best_rule != -1:
                thoa.remove(best_rule)
                return best_rule
            else: # Kh√¥ng c√≥ lu·∫≠t n√†o ƒë·∫øn ƒë∆∞·ª£c KL
                return thoa.pop(0) # Quay v·ªÅ FIFO

        if self.method == 'rpg':
            # T√≠nh h(r) = KC(r, RKL) cho m·ªçi r trong THOA
            best_rule = -1
            min_h = float('inf')

            for r_index in thoa:
                h = self.graph_builder.get_rpg_distance(r_index, self.rkl_indices)
                
                if h < min_h:
                    min_h = h
                    best_rule = r_index
                elif h == min_h:
                    if best_rule == -1 or r_index < best_rule:
                        best_rule = r_index

            if best_rule != -1:
                thoa.remove(best_rule)
                return best_rule
            else: # Kh√¥ng c√≥ lu·∫≠t n√†o ƒë·∫øn ƒë∆∞·ª£c RKL
                return thoa.pop(0) # Quay v·ªÅ FIFO

        return None # M·∫∑c ƒë·ªãnh

    def run(self):
        """Th·ª±c thi thu·∫≠t to√°n suy di·ªÖn ti·∫øn."""
        
        # B∆∞·ªõc 1: Kh·ªüi t·∫°o
        thoa_indices = self._loc() # T√¨m c√°c lu·∫≠t th·ªèa m√£n ban ƒë·∫ßu
        
        # C·∫ßn m·ªôt list THOA c√≥ th·ªÉ pop/remove (kh√¥ng ph·∫£i set)
        if self.method in ['stack', 'max']:
             thoa = sorted(thoa_indices) # Stack/Max ∆∞u ti√™n ch·ªâ s·ªë cao
        else:
             thoa = sorted(thoa_indices) # Queue/Min ∆∞u ti√™n ch·ªâ s·ªë th·∫•p
        
        self.log.append(f"Kh·ªüi t·∫°o: TG = {{{self._format_set(self.tg)}}}, VET = {{}}, THOA = {{{self._format_list([i+1 for i in thoa])}}}")
        
        # üö© TH√äM M·ªöI (Y√äU C·∫¶U 3.2): Th√™m tr·∫°ng th√°i kh·ªüi t·∫°o v√†o b·∫£ng
        self.trace_table.append({
            'r': '',
            'thoa': self._format_list([i+1 for i in thoa]),
            'tg': self._format_set(self.tg),
            'r_remaining': self._get_r_remaining_str(),
            'vet': self._format_list(self.vet)
        })
        
        step_count = 1
        
        # B∆∞·ªõc 2: L·∫∑p
        # D·ª´ng khi THOA r·ªóng HO·∫∂C (c√≥ KL v√† KL ƒë√£ n·∫±m trong TG)
        while thoa and (not self.kl or not self.kl.issubset(self.tg)):
            
            # 2.1. Ch·ªçn lu·∫≠t r
            r_index = self._select_rule_from_thoa(thoa)
            if r_index is None:
                break
                
            rule = self.rules[r_index]
            q = rule['right']
            
            # 2.2. C·∫≠p nh·∫≠t VET v√† R
            self.vet.append(r_index + 1) # D√πng 1-based index
            self.r_used_indices.add(r_index)
            
            # Log b∆∞·ªõc ch·ªçn lu·∫≠t
            log_entry = f"B∆∞·ªõc {step_count}: Ch·ªçn lu·∫≠t r{r_index + 1}. "
            
            # 2.3. C·∫≠p nh·∫≠t TG
            if q not in self.tg:
                self.tg.add(q)
                log_entry += f"Th√™m {q} v√†o TG. "
                
                # 2.4. C·∫≠p nh·∫≠t THOA (T√¨m c√°c lu·∫≠t *m·ªõi* th·ªèa m√£n)
                newly_satisfied = self._loc() # T√¨m t·∫•t c·∫£ lu·∫≠t th·ªèa m√£n (bao g·ªìm c·∫£ c≈©)
                
                new_indices_to_add = []
                for new_idx in newly_satisfied:
                    if new_idx not in thoa: # Ch·ªâ th√™m n·∫øu ch∆∞a c√≥ trong THOA
                        new_indices_to_add.append(new_idx)
                
                # Th√™m v√†o THOA theo logic Stack/Queue
                if new_indices_to_add:
                    new_indices_to_add.sort() # S·∫Øp x·∫øp ƒë·ªÉ th√™m theo th·ª© t·ª±
                    if self.method == 'stack':
                         thoa.extend(new_indices_to_add) # Th√™m v√†o cu·ªëi (LIFO)
                    else: # Queue, Min, Max, FPG, RPG
                         thoa.extend(new_indices_to_add) # Th√™m v√†o cu·ªëi (FIFO)
                         if self.method in ['min', 'max']:
                             thoa.sort() # S·∫Øp x·∫øp l·∫°i ƒë·ªÉ min/max ho·∫°t ƒë·ªông
                         
            else:
                 log_entry += f"S·ª± ki·ªán {q} ƒë√£ c√≥ trong TG. "

            log_entry += f"TG = {{{self._format_set(self.tg)}}}, VET = {{{self._format_list(self.vet)}}}, THOA = {{{self._format_list([i+1 for i in thoa])}}}"
            self.log.append(log_entry)
            
            # üö© TH√äM M·ªöI (Y√äU C·∫¶U 3.2): Th√™m tr·∫°ng th√°i b∆∞·ªõc n√†y v√†o b·∫£ng
            self.trace_table.append({
                'r': str(r_index + 1),
                'thoa': self._format_list([i+1 for i in thoa]),
                'tg': self._format_set(self.tg),
                'r_remaining': self._get_r_remaining_str(),
                'vet': self._format_list(self.vet)
            })
            
            step_count += 1

        # B∆∞·ªõc 3: K·∫øt lu·∫≠n
        if self.kl:
            if self.kl.issubset(self.tg):
                result = "Th√†nh c√¥ng"
                self.log.append(f"K·∫øt th√∫c: {result}. KL = {{{self._format_set(self.kl)}}} ƒë√£ ƒë∆∞·ª£c suy di·ªÖn.")
            else:
                result = "Th·∫•t b·∫°i"
                self.log.append(f"K·∫øt th√∫c: {result}. Kh√¥ng th·ªÉ suy di·ªÖn KL = {{{self._format_set(self.kl)}}}.")
        else:
            result = "Ho√†n th√†nh"
            self.log.append(f"K·∫øt th√∫c: ƒê√£ suy di·ªÖn t·∫•t c·∫£ s·ª± ki·ªán c√≥ th·ªÉ.")
            
        # üö© S·ª¨A L·ªñI (Y√äU C·∫¶U 3.2): Tr·∫£ v·ªÅ trace_table
        return {
            'status': result, 
            'log': self.log, 
            'vet': self.vet, 
            'tg': list(self.tg), 
            'trace_table': self.trace_table 
        }